getwd()   to know working directory
install.packages("..........")
library(".......")    #to know the available tools in that
counts <- read_csv("data/GSE60450_GeneLevel_Normalized(CPM.and.TMM)_data.csv")    #read file into counts
sampleinfo <- read_csv("data/GSE60450_filtered_metadata-1.csv")   # for sample informations
dim(sampleinfo)  #for know dimentions
head(sampleinfo) #1st 6 lines
view(sampleinfo)
colnames(sampleinfo)
sampleinfo$characteristics # listing charactoristic column
colnames(sampleinfo)[1] <- sample_id  # change column 1 name to sample_id
summary(sampleinfo)  #summary of the data
seqdata <- pivot_longer(counts, cols = starts_with("GSM"), names_to = "Sample", values_to = "Count")  #formating the data wide to long
seqdata <- pivot_longer(counts, cols = GSM1480291:GSM1480302, names_to = "Sample", values_to = "Count")   #formating the data wide to long
seqdata <- pivot_longer(counts, cols = -c("gene_id", "gene_symbol"), names_to = "Sample", values_to = "Count") # -c is for ignore gene_id and gene_symbol
allinfo <- full_join(seqdata, sampleinfo, by = c("Sample" = "sample_id"))  # join two data

#MAKING ggplot
ggplot(data = allinfo, mapping = aes(x = Sample, y = Count)) + geom_boxplot() 
ggplot(data = allinfo, mapping = aes(x = Sample, y = log2(Count))) + geom_boxplot()
ggplot(data = allinfo, mapping = aes(x = Sample, y = log2(Count + 1))) + geom_boxplot()  # to avoid 0 log that is undifined
ggplot(data = allinfo, mapping = aes(x = Sample, y = log2(Count + 1))) + geom_violin() # other type of plot
ggplot(data = allinfo, mapping = aes(x = Sample, y = log2(Count + 1), colour = Sample)) +
+     geom_boxplot() # colour the sample
ggplot(data = allinfo, mapping = aes(x = Sample, y = log2(Count + 1), fill = Sample)) +
+     geom_boxplot()

 ggplot(data = allinfo, mapping = aes(x = log2(Count+1))) + geom_density()
ggplot(data = allinfo, mapping = aes(x = log2(Count+1), fill = Sample)) + geom_density()
ggplot(data = allinfo, mapping = aes(x = log2(Count+1), colour = Sample)) + geom_density()

#TO SAVE THE PLOT
> pdf("myplot.pdf")
> ggplot(data = allinfo, mapping = aes(x = log2(Count+1), colour = Sample)) + geom_density()
> dev.off()
TO ADD DATA IN DATASETS          woman <- mutate(woman, BMI= weight/(height**2)*703  
allinfo <- mutate(allinfo, Group = case_when(
str_detect(characteristics, "basal.*virgin") ~ "bvirg",
str_detect(characteristics, "basal.*preg") ~ "bpreg",
str_detect(characteristics, "basal.*lact") ~ "blact",
str_detect(characteristics, "luminal.*virgin") ~ "lvirg",
str_detect(characteristics, "luminal.*preg") ~ "lpreg",
str_detect(characteristics, "luminal.*lact") ~ "llact"
))
#The genes weâ€™ve picked are the 8 genes with the highest counts summed across all samples. The code for
#how to get the gene symbols for these 8 genes is shown below. This code uses pipes (%>%) to string a
#series of function calls together (which is beyond the scope of this tutorial, but totally worth learning about
#independently!).

mygenes <- allinfo %>%
group_by(gene_symbol) %>%
summarise(Total_count = sum(Count)) %>%
arrange(desc(Total_count)) %>%
head(n = 8) %>%
pull(gene_symbol)

#We filter our data for just these genes of interest. We use %in% to check if a value is in a set of values.
mygenes_counts <- filter(allinfo, gene_symbol %in% mygenes)


#We can make boxplots for just these genes. We facet on the gene_symbol column using facet_wrap(). We
#add the tilde symbol ~ in front of the column we want to facet on.

ggplot(data = mygenes_counts,
mapping = aes(x = Group, y = log2(Count + 1), fill = Group)) +
geom_boxplot() +
facet_wrap(~ gene_symbol)

 ggplot(data = mygenes_counts,
+        mapping = aes(x = Group, y = log2(Count + 1), colour = Group)) +
+     geom_point() +
+     facet_wrap(~ gene_symbol)
> 
> ggplot(data = mygenes_counts,
+        mapping = aes(x = Group, y = log2(Count + 1), colour = Group)) +
+     geom_jitter() +
+     facet_wrap(~ gene_symbol)

#to add x axis y axis and title

ggplot(data = mygenes_counts,
mapping = aes(x = Group, y = log2(Count + 1), colour = Group)) +
geom_jitter() +
facet_wrap(~ gene_symbol) +
labs(x = "Cell type and stage", y = "Count", title = "Mammary gland RNA-seq data")

 ggplot(data = mygenes_counts,
+        mapping = aes(x = Group, y = log2(Count + 1), colour = Group)) +
+     geom_jitter() +
+     facet_wrap(~ gene_symbol) +
+     labs(x = "Cell type and stage", y = "Count", title = "Mammary gland RNA-seq data") + theme(axis.text.x = element_text(angle = 90))


#for blank plot
ggplot(data = mygenes_counts,
mapping = aes(x = Group, y = log2(Count + 1), colour = Group)) +
geom_jitter() +
facet_wrap(~ gene_symbol) +
labs(x = "Cell type and stage", y = "Count", title = "Mammary gland RNA-seq data") +
theme(axis.text.x = element_text(angle = 90)) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
