# generating random DNA sequence
nucleotide=c("A","G","C","T")
dna=sample(nucleotide, 100, replace = TRUE)
print(dna)

# CHECKING THE LENGTH 
length1=length(dna)
print(length1)
 
#intializing counters
a=0; t=0; c=0; g=0

#calculation of A,T,G,C
for (i in 1:length1){
  if(dna[i]=="A"){a=a+1}
  if(dna[i]=="T"){t=t+1}
  if(dna[i]=="C"){c=c+1}
  if(dna[i]=="G"){g=g+1}
}
gc=((g+c)/length1)*100
cat("a,t,g,c,gc% ",a,t,g,c,gc)

#method 2
library(stringr)
dna=paste(dna, collapse="")
print(dna)
length1=length(dna)
print(length1)
a=str_count(dna, "A")
t=str_count(dna, "T")
c=str_count(dna, "C")
g-str_count(dna, "g")
cat("a,t,g,c ",a,t,g,c)

#method 3 using stringer library and loop
#library(stringr)
nuc=c("A","T","G","C")
for (x in nuc){
  p_count=str_count(dna,x)
  cat(x,p_count,"\n")
}



#in built function if R
a=c(1,2,3,4,5)
total=sum(a)
print(total)

average=mean(a)
print(average)

#creating your own function
# 4 parts :- function name, arguments, function body, return value

cube=function(length)
# body of function
  {
  cube_area=6*(length^2)
  cube_vol=length^3
  print(c(length,cube_area,cube_vol))  #return value
}

for(i in 1:10)
{
  cube(i)
}


# creating a new file and save in particular position using sink
sink(file="result.txt", append=F)
vector1=c(11,12,13,14,15)
cat("the vector is ", vector1,"\n")
cat("sum of the vector is ",sum(vector1),"\n")
cat("average of vector is ", mean(vector1), "\n")
cat("summary of the vector is \n")
print(summary(vector1))
sink()
file.show("result.txt")


library(tidyr)
library(ggplot2)

# locating iris dataset
data(iris)
View(iris)


# resaping data from  wide to long using 'tidyr' tool


wide_graph=ggplot(iris, aes(x=Species,y=Sepal.Length))+ labs(x="Species", y="Length in cm", title="Variation in petal and sepal of iris species")+
  aes(fill=Species)+
  geom_boxplot()

print(wide_graph)



iris_long=gather(iris, parameter, measure, Sepal.Length:Petal.Width, factor_key=TRUE)
View(iris_long)


base_graph=ggplot(iris_long, aes(x=Species,y=measure))+
  labs(x="Species", y="Length in cm", title="Variation in Petals and Sepals in iris species")+
  theme(axis.text.x = element_text (angle=90))+
  facet_grid(~parameter)+
  aes(fill=Species)

print(base_graph)



graph1=base_graph+geom_boxplot()
print(graph1)


graph.1=base_graph+geom_boxplot(varwidth = TRUE)+geom_jitter()  # width represent no. of sample
print(graph.1)


graph.1=base_graph+geom_boxplot(varwidth = TRUE)+geom_jitter(aes(color=parameter), size=1)
# to seperate parameters by colour
print(graph.1)

graph.2=base_graph+geom_violin()
print(graph.2)

graph.3=base_graph+geom_violin()+geom_boxplot(width=0.1, color="yellow",alpha=0.5)
print(graph.3)



data()
ls("package:datasets")

#datasets available in all packages
data(package = .packages(all.available = TRUE))

data("iris")
View(iris)
summary(iris)


#writting to file
write.table(iris, "iris.dataset.txt", append=FALSE)
file.show("iris.dataset.txt")

write.table(iris, "iris.dataset.txt", append=FALSE, quote=FALSE, row.names=FALSE) #TO REMOVE "" AND RAW NUMBER
file.show("iris.dataset.txt")




# dplyr :- join 2 datasets together  process known as DATA WRANGLING
install.packages("dplyr")
library(dplyr)


#creating dataframe1
tag=c("A","B")
x=c(1,2)
dataframe1=data.frame(tag,x)
print(dataframe1)

#creating dataframe2
tag=c("B","C")
y=c(3,4)
dataframe2=data.frame(tag,y)
print(dataframe2)


#full join- joining the 2 datasets
data3=full_join(dataframe1, dataframe2, by="tag")
dataframe1
dataframe2
data3

# inner join - rows with comon tags from single data frame
data4=inner_join(dataframe1, dataframe2, by="tag")
dataframe1
dataframe2
data4

#left join- raws with comon tag are joined in a single dataframe
data5=left_join(dataframe1, dataframe2, by="tag")
dataframe1
dataframe2
data5


#right join- tags from dataframe2 as reference for data1 if tag match - added else NA
data6=right_join(dataframe1, dataframe2, by="tag")
dataframe1
dataframe2
data6

# using dataframe 1 as refference and printing common tag and its value in dataframe 1
data7=semi_join(dataframe1, dataframe2, by="tag")
dataframe1
dataframe2
data7


# using data1 as reference and showing what is unique in data1
data8=anti_join(dataframe1, dataframe2, by="tag")
dataframe1
dataframe2
data8

file  -> new file  -> R markdown....
function to calculate area and volue of the cube

```{r}
cube=function(length1=1){
area_cube=6*length1^2
volume_cube=length1^3
print(c(length1, area_cube,volume_cube))
}
```


#calling a function
```{r}
cube()
```
```{r}
for (i in 1:10){
  cube(i)
}
```



# ****factoral data structure***********

#categorical variables :- fixed number of values - e.g. days, months, 
#mention in coments : 3 categorical variable

days=c("Sunday","Monday","Friday","Wednesday")
sort(days)

#Q sort the days vector in the order the week days appear in a week 
#creating a factor data structure

#defining levels
week=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")
#converting vector in factor


weekdays=factor(days,levels=week)
weekdays
is.factor(weekdays)
sort(weekdays)

# ACCESSING VALUES IN FACTOR
weekdays
weekdays[1]
weekdays[c(1,2)]
weekdays[1:4]
weekdays[-3]  # print all expect 3rd posistion

# altering values of a factor

weekdays
weekdays[1]="Wednesday"
weekdays

weekdays
weekdays[1]="November"
weekdays

#directly creating factor

work=factor(c("Monday","Wednesday","Friday","Saturday","Sunday","Tuesday","Thursday","Thursday","Friday","Monday"))
work
summary(work)
levels(work)

#adding new level
levels(work)= c(levels(work), "Holiday")
nlevels(work)




# reading marks obtain by students in a class text
#setting the working directory

setwd("E:")
getwd()

data1=read.csv("marks.csv",header=TRUE)
View(data1)
gender=as.factor(data1$Gender)
gender
levels(gender)
summary(gender)


 #exmple2
barplot(table(data1$Gender))
gender1=factor(data$Grnder, levels = c("M","F"))  # change the order in graph
barplot(table(gender1))




# how to read a specific sheet from Excel documents in R
install.packages("readxl")
library(readxl)
getwd()


#reading sheet 1

# if you just mention the name of the excel document, the 1st sheet read by default

S1=read_excel("excelR.xlsx")
S1

S2=read_excel("excelR.xlsx",2)
S2


S3=read_excel("excelR.xlsx",Subject_2)

S3


extract columns from excel files

 library(readxl)
   
             # Step 1: Get a list of Excel files in the folder (adjust the path)
             file_list <- list.files(path = "C:/Users/dhrumil/Desktop/project/", pattern = "*.xlsx", full.names = TRUE)
             
             # Step 2: Define column names that will be used in the output
             codes <- c("run_accession","isolation_source","study_accession","scientific_name","strain","collected_by","sample_accession", "submission_accession", "collected_by", "instrument_platform")
             
             # Step 3: Read data from the Excel files using lapply
             # Note: We use range = "A1:GJ1" to select the specific range of columns you need.
             
             Data <- lapply(file_list, function(file_path) {
               # Read data from each file
               data <- read_excel(file_path, range = "A1:GI20")
               print(names(data)) 
               
               # Optional: Select only the columns you need (example)
               selected_data <- data[, codes, drop = FALSE]
               
               # Return the selected data
               return(selected_data)
             })
             
             # Step 4: Print or view the data
             # If you want to print the result of each data frame in the list
             print(Data)
             
             # If you want to view the first dataframe in the list
             View(Data[[1]])
             
             
             
             
             #test:save file, excel format
             Write_xlsx(data, ExcelfileName = "data_dhrumil.xlsx")
             
             




R STUDIO FOR EXCEL EXTRACTION

> setwd("~/PRACTICE")
> setwd("C:/Users/dhrumil/Desktop/project")
> df = readxl::read_excel(path = 'PRJNA44890.metadata.xlsx')
> View(df)
library(dplyr)
> df2=df %>% select("run_accession","isolation_source","study_accession","scientific_name","strain","collected_by","sample_accession", "submission_accession", "collected_by", "instrument_platform")
 df2=df %>% select("run_accession","isolation_source","study_accession","scientific_name","strain","collected_by","sample_accession", "submission_accession", "collected_by", "instrument_platform")
> View(df2)
> write.csv(df2,'dhrumil.csv',row.names=FALSE)

MERGE 2 EXCEL SHEET
  df1 = readxl::read_excel(path = 'sdi.xlsx')
  df2 = readxl::read_excel(path = 'dhrumil.xlsx')
  df3 <- union(df1, df2)
   View(df3) 
             
